// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sip_service.proto
#ifndef GRPC_sip_5fservice_2eproto__INCLUDED
#define GRPC_sip_5fservice_2eproto__INCLUDED

#include "sip_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sipservice {

class SipService final {
 public:
  static constexpr char const* service_full_name() {
    return "sipservice.SipService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::sipservice::CallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>> AsyncMakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>>(AsyncMakeCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>> PrepareAsyncMakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>>(PrepareAsyncMakeCallRaw(context, request, cq));
    }
    virtual ::grpc::Status Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::sipservice::HangupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>> AsyncHangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>>(AsyncHangupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>> PrepareAsyncHangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>>(PrepareAsyncHangupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> StreamAudio(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(StreamAudioRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> AsyncStreamAudio(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(AsyncStreamAudioRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> PrepareAsyncStreamAudio(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(PrepareAsyncStreamAudioRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sipservice::CallEvent>> SubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sipservice::CallEvent>>(SubscribeToEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>> AsyncSubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>>(AsyncSubscribeToEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>> PrepareAsyncSubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>>(PrepareAsyncSubscribeToEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamAudio(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sipservice::AudioChunk,::sipservice::AudioChunk>* reactor) = 0;
      virtual void SubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest* request, ::grpc::ClientReadReactor< ::sipservice::CallEvent>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>* AsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::CallResponse>* PrepareAsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>* AsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sipservice::HangupResponse>* PrepareAsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* StreamAudioRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* AsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* PrepareAsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sipservice::CallEvent>* SubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>* AsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sipservice::CallEvent>* PrepareAsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::sipservice::CallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>> AsyncMakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>>(AsyncMakeCallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>> PrepareAsyncMakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>>(PrepareAsyncMakeCallRaw(context, request, cq));
    }
    ::grpc::Status Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::sipservice::HangupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>> AsyncHangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>>(AsyncHangupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>> PrepareAsyncHangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>>(PrepareAsyncHangupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> StreamAudio(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(StreamAudioRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> AsyncStreamAudio(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(AsyncStreamAudioRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>> PrepareAsyncStreamAudio(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>>(PrepareAsyncStreamAudioRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sipservice::CallEvent>> SubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sipservice::CallEvent>>(SubscribeToEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sipservice::CallEvent>> AsyncSubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sipservice::CallEvent>>(AsyncSubscribeToEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sipservice::CallEvent>> PrepareAsyncSubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sipservice::CallEvent>>(PrepareAsyncSubscribeToEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, std::function<void(::grpc::Status)>) override;
      void MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, std::function<void(::grpc::Status)>) override;
      void Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamAudio(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sipservice::AudioChunk,::sipservice::AudioChunk>* reactor) override;
      void SubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest* request, ::grpc::ClientReadReactor< ::sipservice::CallEvent>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>* AsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>* PrepareAsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>* AsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>* PrepareAsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* StreamAudioRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* AsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* PrepareAsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sipservice::CallEvent>* SubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request) override;
    ::grpc::ClientAsyncReader< ::sipservice::CallEvent>* AsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sipservice::CallEvent>* PrepareAsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MakeCall_;
    const ::grpc::internal::RpcMethod rpcmethod_Hangup_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status MakeCall(::grpc::ServerContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response);
    virtual ::grpc::Status Hangup(::grpc::ServerContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response);
    virtual ::grpc::Status StreamAudio(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* stream);
    virtual ::grpc::Status SubscribeToEvents(::grpc::ServerContext* context, const ::sipservice::EventSubscriptionRequest* request, ::grpc::ServerWriter< ::sipservice::CallEvent>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeCall() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeCall(::grpc::ServerContext* context, ::sipservice::CallRequest* request, ::grpc::ServerAsyncResponseWriter< ::sipservice::CallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Hangup() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHangup(::grpc::ServerContext* context, ::sipservice::HangupRequest* request, ::grpc::ServerAsyncResponseWriter< ::sipservice::HangupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamAudio() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamAudio(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToEvents(::grpc::ServerContext* context, ::sipservice::EventSubscriptionRequest* request, ::grpc::ServerAsyncWriter< ::sipservice::CallEvent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MakeCall<WithAsyncMethod_Hangup<WithAsyncMethod_StreamAudio<WithAsyncMethod_SubscribeToEvents<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MakeCall() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sipservice::CallRequest, ::sipservice::CallResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response) { return this->MakeCall(context, request, response); }));}
    void SetMessageAllocatorFor_MakeCall(
        ::grpc::MessageAllocator< ::sipservice::CallRequest, ::sipservice::CallResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sipservice::CallRequest, ::sipservice::CallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeCall(
      ::grpc::CallbackServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Hangup() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sipservice::HangupRequest, ::sipservice::HangupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response) { return this->Hangup(context, request, response); }));}
    void SetMessageAllocatorFor_Hangup(
        ::grpc::MessageAllocator< ::sipservice::HangupRequest, ::sipservice::HangupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sipservice::HangupRequest, ::sipservice::HangupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hangup(
      ::grpc::CallbackServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamAudio() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::sipservice::AudioChunk, ::sipservice::AudioChunk>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamAudio(context); }));
    }
    ~WithCallbackMethod_StreamAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* StreamAudio(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sipservice::EventSubscriptionRequest, ::sipservice::CallEvent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sipservice::EventSubscriptionRequest* request) { return this->SubscribeToEvents(context, request); }));
    }
    ~WithCallbackMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sipservice::CallEvent>* SubscribeToEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_MakeCall<WithCallbackMethod_Hangup<WithCallbackMethod_StreamAudio<WithCallbackMethod_SubscribeToEvents<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeCall() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Hangup() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamAudio() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeCall() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Hangup() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHangup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamAudio() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamAudio(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MakeCall() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MakeCall(context, request, response); }));
    }
    ~WithRawCallbackMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MakeCall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Hangup() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Hangup(context, request, response); }));
    }
    ~WithRawCallbackMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Hangup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamAudio() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamAudio(context); }));
    }
    ~WithRawCallbackMethod_StreamAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamAudio(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamAudio(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeToEvents(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeCall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MakeCall() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sipservice::CallRequest, ::sipservice::CallResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sipservice::CallRequest, ::sipservice::CallResponse>* streamer) {
                       return this->StreamedMakeCall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MakeCall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeCall(::grpc::ServerContext* /*context*/, const ::sipservice::CallRequest* /*request*/, ::sipservice::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeCall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sipservice::CallRequest,::sipservice::CallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Hangup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Hangup() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sipservice::HangupRequest, ::sipservice::HangupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sipservice::HangupRequest, ::sipservice::HangupResponse>* streamer) {
                       return this->StreamedHangup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Hangup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Hangup(::grpc::ServerContext* /*context*/, const ::sipservice::HangupRequest* /*request*/, ::sipservice::HangupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHangup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sipservice::HangupRequest,::sipservice::HangupResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MakeCall<WithStreamedUnaryMethod_Hangup<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeToEvents() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sipservice::EventSubscriptionRequest, ::sipservice::CallEvent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sipservice::EventSubscriptionRequest, ::sipservice::CallEvent>* streamer) {
                       return this->StreamedSubscribeToEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeToEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToEvents(::grpc::ServerContext* /*context*/, const ::sipservice::EventSubscriptionRequest* /*request*/, ::grpc::ServerWriter< ::sipservice::CallEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sipservice::EventSubscriptionRequest,::sipservice::CallEvent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeToEvents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_MakeCall<WithStreamedUnaryMethod_Hangup<WithSplitStreamingMethod_SubscribeToEvents<Service > > > StreamedService;
};

}  // namespace sipservice


#endif  // GRPC_sip_5fservice_2eproto__INCLUDED
