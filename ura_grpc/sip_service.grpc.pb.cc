// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sip_service.proto

#include "sip_service.pb.h"
#include "sip_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sipservice {

static const char* SipService_method_names[] = {
  "/sipservice.SipService/MakeCall",
  "/sipservice.SipService/Hangup",
  "/sipservice.SipService/StreamAudio",
  "/sipservice.SipService/SubscribeToEvents",
};

std::unique_ptr< SipService::Stub> SipService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SipService::Stub> stub(new SipService::Stub(channel, options));
  return stub;
}

SipService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MakeCall_(SipService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hangup_(SipService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamAudio_(SipService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SubscribeToEvents_(SipService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SipService::Stub::MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::sipservice::CallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sipservice::CallRequest, ::sipservice::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeCall_, context, request, response);
}

void SipService::Stub::async::MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sipservice::CallRequest, ::sipservice::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeCall_, context, request, response, std::move(f));
}

void SipService::Stub::async::MakeCall(::grpc::ClientContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>* SipService::Stub::PrepareAsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sipservice::CallResponse, ::sipservice::CallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sipservice::CallResponse>* SipService::Stub::AsyncMakeCallRaw(::grpc::ClientContext* context, const ::sipservice::CallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SipService::Stub::Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::sipservice::HangupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sipservice::HangupRequest, ::sipservice::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hangup_, context, request, response);
}

void SipService::Stub::async::Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sipservice::HangupRequest, ::sipservice::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hangup_, context, request, response, std::move(f));
}

void SipService::Stub::async::Hangup(::grpc::ClientContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hangup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>* SipService::Stub::PrepareAsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sipservice::HangupResponse, ::sipservice::HangupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hangup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sipservice::HangupResponse>* SipService::Stub::AsyncHangupRaw(::grpc::ClientContext* context, const ::sipservice::HangupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHangupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* SipService::Stub::StreamAudioRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sipservice::AudioChunk, ::sipservice::AudioChunk>::Create(channel_.get(), rpcmethod_StreamAudio_, context);
}

void SipService::Stub::async::StreamAudio(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sipservice::AudioChunk,::sipservice::AudioChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sipservice::AudioChunk,::sipservice::AudioChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamAudio_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* SipService::Stub::AsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sipservice::AudioChunk, ::sipservice::AudioChunk>::Create(channel_.get(), cq, rpcmethod_StreamAudio_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* SipService::Stub::PrepareAsyncStreamAudioRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sipservice::AudioChunk, ::sipservice::AudioChunk>::Create(channel_.get(), cq, rpcmethod_StreamAudio_, context, false, nullptr);
}

::grpc::ClientReader< ::sipservice::CallEvent>* SipService::Stub::SubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sipservice::CallEvent>::Create(channel_.get(), rpcmethod_SubscribeToEvents_, context, request);
}

void SipService::Stub::async::SubscribeToEvents(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest* request, ::grpc::ClientReadReactor< ::sipservice::CallEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sipservice::CallEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sipservice::CallEvent>* SipService::Stub::AsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sipservice::CallEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sipservice::CallEvent>* SipService::Stub::PrepareAsyncSubscribeToEventsRaw(::grpc::ClientContext* context, const ::sipservice::EventSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sipservice::CallEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeToEvents_, context, request, false, nullptr);
}

SipService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SipService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SipService::Service, ::sipservice::CallRequest, ::sipservice::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SipService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sipservice::CallRequest* req,
             ::sipservice::CallResponse* resp) {
               return service->MakeCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SipService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SipService::Service, ::sipservice::HangupRequest, ::sipservice::HangupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SipService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sipservice::HangupRequest* req,
             ::sipservice::HangupResponse* resp) {
               return service->Hangup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SipService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SipService::Service, ::sipservice::AudioChunk, ::sipservice::AudioChunk>(
          [](SipService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sipservice::AudioChunk,
             ::sipservice::AudioChunk>* stream) {
               return service->StreamAudio(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SipService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SipService::Service, ::sipservice::EventSubscriptionRequest, ::sipservice::CallEvent>(
          [](SipService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sipservice::EventSubscriptionRequest* req,
             ::grpc::ServerWriter<::sipservice::CallEvent>* writer) {
               return service->SubscribeToEvents(ctx, req, writer);
             }, this)));
}

SipService::Service::~Service() {
}

::grpc::Status SipService::Service::MakeCall(::grpc::ServerContext* context, const ::sipservice::CallRequest* request, ::sipservice::CallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SipService::Service::Hangup(::grpc::ServerContext* context, const ::sipservice::HangupRequest* request, ::sipservice::HangupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SipService::Service::StreamAudio(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sipservice::AudioChunk, ::sipservice::AudioChunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SipService::Service::SubscribeToEvents(::grpc::ServerContext* context, const ::sipservice::EventSubscriptionRequest* request, ::grpc::ServerWriter< ::sipservice::CallEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sipservice

